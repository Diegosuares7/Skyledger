// Generated by CodiumAI

import { validateExcelRounding } from '../round-excel-validator';
import { ProcessResponseEnum } from '../../entities/process-response/process-response.entity';
import { SAPExcelFileResult } from '../../entities/sap-transformer/excel/sap-excel-file-result.interface';
import { SAPRoundMapper } from '../../entities/sap-transformer/mappings/sap-round-mapper';
import { SAPExcelRow } from '../../entities/sap-transformer/excel/sap-row.entity';
import { RowType } from '../../sap-transformer/excel-transformer/enums/row-type.enum';
import { InvalidCurrencyForRoundingException } from '../../rounding-validator/exceptions/invalid-currency-for-rounding.exception';

describe('validateExcelRounding', () => {
  beforeEach(() => {
    process.env.MANDANTE_VALUE = '10';
  });
  // Given a valid SAPExcelFileResult and a valid roundingLimitMapper, when validateExcelRounding is called, it should return the same SAPExcelFileResult object with status set to ProcessResponseEnum.SUCCESS and no error message if the sum of amounts in the SAPExcelFile is within the rounding limit.
  it('should return the same SAPExcelFileResult object with status set to ProcessResponseEnum.SUCCESS and no error message', () => {
    // Arrange
    const excelResult: SAPExcelFileResult = {
      file: {
        fileName: 'xxxxxxx',
        errors: [],
        fileKeys: {
          currency: 'USD',
          companyCode: 'JA',
          accountPeriod: '20220101',
        },
        rows: [
          new SAPExcelRow('20220101', 'USD', '202201', 100, '', '', RowType.DEBIT),
          new SAPExcelRow('20220101', 'USD', '202201', 100, '', '', RowType.CREDIT),
        ],
      },
      status: ProcessResponseEnum.SUCCESS,
    };
    const roundingLimitMapper: Record<string, SAPRoundMapper> = {
      USD: {
        currencyCode: 'USD',
        value: 0.1,
      },
    };

    // Act
    const result = validateExcelRounding(excelResult, roundingLimitMapper);

    // Assert
    expect(result).toBe(excelResult);
    expect(result.status).toBe(ProcessResponseEnum.SUCCESS);
    expect(result.errorMessage).toBeUndefined();
  });

  it('When the sum is less than the rounding limit, should return the same SAPExcelFileResult object with status set to ProcessResponseEnum.SUCCESS and no error message', () => {
    // Arrange
    const excelResult: SAPExcelFileResult = {
      file: {
        fileName: 'xxxxxxx',
        errors: [],
        fileKeys: {
          currency: 'USD',
          companyCode: 'JA',
          accountPeriod: '20220101',
        },
        rows: [
          new SAPExcelRow('20220101', 'USD', '202201', 100, '', '', RowType.DEBIT),
          new SAPExcelRow('20220101', 'USD', '202201', 55, '', '', RowType.CREDIT),
          new SAPExcelRow('20220101', 'USD', '202201', 44.94, '', '', RowType.CREDIT),
        ],
      },
      status: ProcessResponseEnum.SUCCESS,
    };
    const roundingLimitMapper: Record<string, SAPRoundMapper> = {
      USD: {
        currencyCode: 'USD',
        value: 0.1,
      },
    };

    // Act
    const result = validateExcelRounding(excelResult, roundingLimitMapper);

    // Assert
    expect(result).toBe(excelResult);
    expect(result.status).toBe(ProcessResponseEnum.SUCCESS);
    expect(result.errorMessage).toBeUndefined();
  });

  // Given a valid SAPExcelFileResult and a valid roundingLimitMapper, when validateExcelRounding is called, it should return the same SAPExcelFileResult object with status set to ProcessResponseEnum.ERROR and an error message if the sum of amounts in the SAPExcelFile exceeds the rounding limit.
  it('should return the same SAPExcelFileResult object with status set to ProcessResponseEnum.ERROR and an error message', () => {
    // Arrange
    const excelResult: SAPExcelFileResult = {
      file: {
        fileName: 'xxxxxxx',
        errors: [],
        fileKeys: {
          currency: 'USD',
          companyCode: 'JA',
          accountPeriod: '20220101',
        },
        rows: [
          new SAPExcelRow('20220101', 'USD', '202201', 100, '', '', RowType.DEBIT),
          new SAPExcelRow('20220101', 'USD', '202201', 55, '', '', RowType.CREDIT),
          new SAPExcelRow('20220101', 'USD', '202201', 54.84, '', '', RowType.CREDIT),
        ],
      },
      status: ProcessResponseEnum.SUCCESS,
    };
    const roundingLimitMapper: Record<string, SAPRoundMapper> = {
      USD: {
        currencyCode: 'USD',
        value: 0.1,
      },
    };

    // Act
    const result = validateExcelRounding(excelResult, roundingLimitMapper);

    // Assert
    expect(result).toBe(excelResult);
    expect(result.status).toBe(ProcessResponseEnum.ERROR);
    expect(result.errorMessage).toBeDefined();
  });

  // Given a SAPExcelFileResult with a file but an invalid currency code and a valid roundingLimitMapper, when validateExcelRounding is called, it should throw an InvalidCurrencyForRoundingException.
  it('should throw an InvalidCurrencyForRoundingException when the currency code is invalid', () => {
    // Arrange
    const excelResult: SAPExcelFileResult = {
      file: {
        fileName: 'xxxxxxx',
        errors: [],
        fileKeys: {
          currency: 'ARS',
          companyCode: 'JA',
          accountPeriod: '20220101',
        },
        rows: [
          new SAPExcelRow('20220101', 'ARS', '202201', 100, '', '', RowType.DEBIT),
          new SAPExcelRow('20220101', 'ARS', '202201', 100, '', '', RowType.CREDIT),
        ],
      },
      status: ProcessResponseEnum.SUCCESS,
    };
    const roundingLimitMapper: Record<string, SAPRoundMapper> = {
      USD: {
        currencyCode: 'USD',
        value: 0.1,
      },
    };

    // Act and Assert
    expect(() => validateExcelRounding(excelResult, roundingLimitMapper)).toThrow(InvalidCurrencyForRoundingException);
  });

  // Given a SAPExcelFileResult with a file and a valid currency code but no rows and a valid roundingLimitMapper, when validateExcelRounding is called, it should return the same SAPExcelFileResult object with status set to ProcessResponseEnum.SUCCESS and no error message.
  it('should return the same SAPExcelFileResult object with status set to ProcessResponseEnum.SUCCESS and no error message', () => {
    // Arrange
    const excelResult: SAPExcelFileResult = {
      file: {
        fileName: 'xxxxxxx',
        errors: [],
        fileKeys: {
          currency: 'USD',
          companyCode: 'JA',
          accountPeriod: '20220101',
        },
        rows: [],
      },
      status: ProcessResponseEnum.SUCCESS,
    };
    const roundingLimitMapper: Record<string, SAPRoundMapper> = {
      USD: {
        currencyCode: 'USD',
        value: 0.1,
      },
    };

    // Act
    const result = validateExcelRounding(excelResult, roundingLimitMapper);

    // Assert
    expect(result).toBe(excelResult);
    expect(result.status).toBe(ProcessResponseEnum.SUCCESS);
    expect(result.errorMessage).toBeUndefined();
  });
});

it('should adjust rounding for the last row and sum to zero when necessary', () => {
  // Arrange
  const excelResult: SAPExcelFileResult = {
    file: {
      fileName: 'xxxxxxx',
      errors: [],
      fileKeys: {
        currency: 'USD',
        companyCode: 'JA',
        accountPeriod: '20220101',
      },
      rows: [
        new SAPExcelRow('20220101', 'USD', '202201', 50, '', '', RowType.DEBIT),
        new SAPExcelRow('20220101', 'USD', '202201', 50, '', '', RowType.DEBIT),
        new SAPExcelRow('20220101', 'USD', '202201', 45, '', '', RowType.CREDIT),
        new SAPExcelRow('20220101', 'USD', '202201', 54.94, '', '', RowType.CREDIT),
      ],
    },
    status: ProcessResponseEnum.SUCCESS,
  };
  const roundingLimitMapper: Record<string, SAPRoundMapper> = {
    USD: {
      currencyCode: 'USD',
      value: 0.1,
    },
  };

  // Act
  const result = validateExcelRounding(excelResult, roundingLimitMapper);

  // Assert
  expect(result).toBe(excelResult);
  expect(result.status).toBe(ProcessResponseEnum.SUCCESS);
  expect(result.file!.rows[3].montoEnMonedaDelDocto).toEqual(55);
});

it('should adjust rounding for the last row and sum to zero when necessary', () => {
  // Arrange
  const excelResult: SAPExcelFileResult = {
    file: {
      fileName: 'xxxxxxx',
      errors: [],
      fileKeys: {
        currency: 'USD',
        companyCode: 'JA',
        accountPeriod: '20220101',
      },
      rows: [
        new SAPExcelRow('20220101', 'USD', '202201', 50, '', '', RowType.DEBIT),
        new SAPExcelRow('20220101', 'USD', '202201', 50, '', '', RowType.DEBIT),
        new SAPExcelRow('20220101', 'USD', '202201', 45, '', '', RowType.CREDIT),
        new SAPExcelRow('20220101', 'USD', '202201', 55.08, '', '', RowType.CREDIT),
      ],
    },
    status: ProcessResponseEnum.SUCCESS,
  };
  const roundingLimitMapper: Record<string, SAPRoundMapper> = {
    USD: {
      currencyCode: 'USD',
      value: 0.1,
    },
  };

  // Act
  const result = validateExcelRounding(excelResult, roundingLimitMapper);

  // Assert
  expect(result).toBe(excelResult);
  expect(result.status).toBe(ProcessResponseEnum.SUCCESS);
  expect(result.file!.rows[3].montoEnMonedaDelDocto).toEqual(55);
});
