// Generated by CodiumAI

import { GroupedJournals } from '../../../entities/grouper/grouped-journals';
import { SAPMapper } from '../../../entities/sap-transformer/mappings/sap-mapper';
import { generateExcelFile } from '../excel-mapper';
import { EXCEL_TRANSFORMER_ERROR_MESSAGES } from '../exceptions/excel-transformer-error-messages';
import { InvalidSKLCodeCompanyMappingException } from '../exceptions/invalid-code-company-mapping.exception';

describe('generateExcelFile', () => {
  // Generates an Excel file with the correct file name
  beforeAll(() => {
    process.env.MANDANTE_VALUE = '12';
  });
  it('should generate an Excel file with the correct file name', () => {
    const grouperJournals: GroupedJournals = {
      keyGrouper: {
        companyCode: 'ABC',
        accountPeriod: '202201',
        currency: 'USD',
      },
      accountsInfo: [
        {
          debitAmount: 100,
          creditAmount: 0,
          accountName: 'SLAccount1',
          accountDescription: 'Description1',
        },
        {
          debitAmount: 0,
          creditAmount: 200,
          accountName: 'SLAccount2',
          accountDescription: 'Description2',
        },
      ],
      entryDate: '20220101',
    };

    const sapMappingTables: SAPMapper = {
      accountsMappings: {
        SLAccount1: {
          AccountType: 'Type1',
          SAPAccount: 'SAPAccount1',
          SLAccount: 'SLAccount1',
        },
        SLAccount2: {
          AccountType: 'Type2',
          SAPAccount: 'SAPAccount2',
          SLAccount: 'SLAccount2',
        },
      },
      movementsMappings: {
        Type1: {
          debit: 1,
          accountType: 'Type1',
          credit: 2,
        },
        Type2: {
          debit: 3,
          credit: 4,
          accountType: 'Type2',
        },
      },
      companyMappings: {
        ABC: {
          SAPCompanyCode: 'SAPCode',
          SLCompanyCode: 'ABC',
        },
      },
    };

    const correlativeFile = 1;

    const excelFile = generateExcelFile(grouperJournals, sapMappingTables, correlativeFile);

    expect(excelFile.fileName).toBe('SA20220101.xlsx');
    expect(excelFile.errors).toHaveLength(0);
  });

  // Handles correctly when a movement amount is zero
  it('should handle correctly when a movement amount is zero', () => {
    const grouperJournals: GroupedJournals = {
      keyGrouper: {
        companyCode: 'ABC',
        accountPeriod: '202201',
        currency: 'USD',
      },
      accountsInfo: [
        {
          debitAmount: 100,
          creditAmount: 0,
          accountName: 'SLAccount1',
          accountDescription: 'Description1',
        },
        {
          debitAmount: 0,
          creditAmount: 200,
          accountName: 'SLAccount2',
          accountDescription: 'Description2',
        },
      ],
      entryDate: '20220101',
    };

    const sapMappingTables: SAPMapper = {
      accountsMappings: {
        SLAccount1: {
          AccountType: 'Type1',
          SAPAccount: 'SAPAccount1',
          SLAccount: 'SLAccount1',
        },
        SLAccount2: {
          AccountType: 'Type2',
          SAPAccount: 'SAPAccount2',
          SLAccount: 'SLAccount2',
        },
      },
      movementsMappings: {
        Type1: {
          debit: 1,
          credit: 2,
          accountType: 'Type1',
        },
        Type2: {
          debit: 3,
          credit: 4,
          accountType: 'Type2',
        },
      },
      companyMappings: {
        ABC: {
          SAPCompanyCode: 'SAPCode',
          SLCompanyCode: 'ABC',
        },
      },
    };

    const correlativeFile = 1;

    const excelFile = generateExcelFile(grouperJournals, sapMappingTables, correlativeFile);

    expect(excelFile.rows.length).toBe(2);
    expect(excelFile.errors.length).toBe(0);
  });

  // Handles correctly when a movement amount is not zero
  it('should handle correctly when a movement amount is zero', () => {
    const grouperJournals: GroupedJournals = {
      keyGrouper: {
        companyCode: 'ABC',
        accountPeriod: '202201',
        currency: 'USD',
      },
      accountsInfo: [
        {
          debitAmount: 100,
          creditAmount: 10,
          accountName: 'SLAccount1',
          accountDescription: 'Description1',
        },
        {
          debitAmount: 10,
          creditAmount: 200,
          accountName: 'SLAccount2',
          accountDescription: 'Description2',
        },
      ],
      entryDate: '20220101',
    };

    const sapMappingTables: SAPMapper = {
      accountsMappings: {
        SLAccount1: {
          AccountType: 'Type1',
          SAPAccount: 'SAPAccount1',
          SLAccount: 'SLAccount1',
        },
        SLAccount2: {
          AccountType: 'Type2',
          SAPAccount: 'SAPAccount2',
          SLAccount: 'SLAccount2',
        },
      },
      movementsMappings: {
        Type1: {
          debit: 1,
          credit: 2,
          accountType: 'Type1',
        },
        Type2: {
          debit: 3,
          credit: 4,
          accountType: 'Type2',
        },
      },
      companyMappings: {
        ABC: {
          SAPCompanyCode: 'SAPCode',
          SLCompanyCode: 'ABC',
        },
      },
    };

    const correlativeFile = 1;

    const excelFile = generateExcelFile(grouperJournals, sapMappingTables, correlativeFile);

    expect(excelFile.rows.length).toBe(4);
    expect(excelFile.errors.length).toBe(0);
  });

  // Sets the correlativo value for each row correctly
  it('should set the correlativo value for each row correctly', () => {
    const grouperJournals: GroupedJournals = {
      keyGrouper: {
        companyCode: 'ABC',
        accountPeriod: '202201',
        currency: 'USD',
      },
      accountsInfo: [
        {
          debitAmount: 100,
          creditAmount: 0,
          accountName: 'SLAccount1',
          accountDescription: 'Description1',
        },
        {
          debitAmount: 0,
          creditAmount: 200,
          accountName: 'SLAccount2',
          accountDescription: 'Description2',
        },
      ],
      entryDate: '20220101',
    };

    const sapMappingTables: SAPMapper = {
      accountsMappings: {
        SLAccount1: {
          AccountType: 'Type1',
          SAPAccount: 'SAPAccount1',
          SLAccount: 'SLAccount1',
        },
        SLAccount2: {
          AccountType: 'Type2',
          SAPAccount: 'SAPAccount2',
          SLAccount: 'SLAccount2',
        },
      },
      movementsMappings: {
        Type1: {
          debit: 1,
          credit: 2,
          accountType: 'Type1',
        },
        Type2: {
          debit: 3,
          credit: 4,
          accountType: 'Type2',
        },
      },
      companyMappings: {
        ABC: {
          SAPCompanyCode: 'SAPCode',
          SLCompanyCode: 'ABC',
        },
      },
    };

    const correlativeFile = 1;

    const excelFile = generateExcelFile(grouperJournals, sapMappingTables, correlativeFile);

    expect(excelFile.rows[0].correlativo).toBe(1);
    expect(excelFile.rows[1].correlativo).toBe(2);
  });

  // Handles correctly when an account name is not found in the mappings
  it('should handle correctly when an account name is not found in the mappings', () => {
    const grouperJournals: GroupedJournals = {
      keyGrouper: {
        companyCode: 'ABC',
        accountPeriod: '202201',
        currency: 'USD',
      },
      accountsInfo: [
        {
          debitAmount: 100,
          creditAmount: 0,
          accountName: 'SLAccount1',
          accountDescription: 'Description1',
        },
        {
          debitAmount: 0,
          creditAmount: 200,
          accountName: 'SLAccount3', // Account3 is not found in the mappings
          accountDescription: 'Description3',
        },
      ],
      entryDate: '20220101',
    };

    const sapMappingTables: SAPMapper = {
      accountsMappings: {
        SLAccount1: {
          AccountType: 'Type1',
          SAPAccount: 'SAPAccount1',
          SLAccount: 'SLAccount1',
        },
        SLAccount2: {
          AccountType: 'Type2',
          SAPAccount: 'SAPAccount2',
          SLAccount: 'SLAccount2',
        },
      },
      movementsMappings: {
        Type1: {
          debit: 1,
          credit: 2,
          accountType: 'Type1',
        },
        Type2: {
          debit: 3,
          credit: 4,
          accountType: 'Type2',
        },
      },
      companyMappings: {
        ABC: {
          SAPCompanyCode: 'SAPCode',
          SLCompanyCode: 'ABC',
        },
      },
    };

    const correlativeFile = 1;

    const excelFile = generateExcelFile(grouperJournals, sapMappingTables, correlativeFile);

    expect(excelFile.fileName).toBe('SA20220101.xlsx');
    expect(excelFile.rows.length).toBe(1);
    expect(excelFile.rows[0].cuentaContable).toBe('SAPAccount1');
    expect(excelFile.errors.length).toBe(1);
    expect(excelFile.errors[0].accountName).toBe('SLAccount3');
    expect(excelFile.errors[0].message).toContain(
      EXCEL_TRANSFORMER_ERROR_MESSAGES.INVALID_SKL_ACCOUNT_CODE('SLAccount3'),
    );
  });

  // Handles correctly when an account type is not found in the mappings
  it('should handle correctly when an account type is not found in the mappings', () => {
    const grouperJournals: GroupedJournals = {
      keyGrouper: {
        companyCode: 'ABC',
        accountPeriod: '202201',
        currency: 'USD',
      },
      accountsInfo: [
        {
          debitAmount: 100,
          creditAmount: 0,
          accountName: 'SLAccount1',
          accountDescription: 'Description1',
        },
        {
          debitAmount: 100,
          creditAmount: 0,
          accountName: 'SLAccount2',
          accountDescription: 'Description1',
        },
      ],
      entryDate: '20220101',
    };

    const sapMappingTables: SAPMapper = {
      accountsMappings: {
        SLAccount1: {
          AccountType: 'Type1',
          SAPAccount: 'SAPAccount1',
          SLAccount: 'SLAccount1',
        },
        SLAccount2: {
          AccountType: 'Type2',
          SAPAccount: 'SAPAccount2',
          SLAccount: 'SLAccount2',
        },
      },
      movementsMappings: {
        Type1: {
          debit: 1,
          credit: 2,
          accountType: 'Type1',
        },
      },
      companyMappings: {
        ABC: {
          SAPCompanyCode: 'SAPCode',
          SLCompanyCode: 'ABC',
        },
      },
    };

    const correlativeFile = 1;

    const excelFile = generateExcelFile(grouperJournals, sapMappingTables, correlativeFile);

    expect(excelFile.fileName).toBe('SA20220101.xlsx');
    expect(excelFile.rows.length).toBe(1);
    expect(excelFile.rows[0].claveContabilizacion).toBe('1');
    expect(excelFile.errors.length).toBe(1);
    expect(excelFile.errors[0].message).toContain(EXCEL_TRANSFORMER_ERROR_MESSAGES.INVALID_SKL_MOVEMENTS_CODE('Type2'));
  });

  // Handles correctly when the date format is invalid
  it('should handle invalid date format and throw an error', () => {
    const grouperJournals: GroupedJournals = {
      keyGrouper: {
        companyCode: 'ABC',
        accountPeriod: '202201',
        currency: 'USD',
      },
      accountsInfo: [
        {
          debitAmount: 100,
          creditAmount: 0,
          accountName: 'Account1',
          accountDescription: 'Description1',
        },
        {
          debitAmount: 0,
          creditAmount: 200,
          accountName: 'Account2',
          accountDescription: 'Description2',
        },
      ],
      entryDate: '2022-01-01',
    };

    const sapMappingTables: SAPMapper = {
      accountsMappings: {
        SLAccount1: {
          AccountType: 'Type1',
          SAPAccount: 'SAPAccount1',
          SLAccount: 'SLAccount1',
        },
        SLAccount2: {
          AccountType: 'Type2',
          SAPAccount: 'SAPAccount2',
          SLAccount: 'SLAccount2',
        },
      },
      movementsMappings: {
        Type1: {
          debit: 1,
          credit: 2,
          accountType: 'Type1',
        },
        Type2: {
          debit: 3,
          credit: 4,
          accountType: 'Type2',
        },
      },
      companyMappings: {
        ABC: {
          SAPCompanyCode: 'SAPCode',
          SLCompanyCode: 'ABC',
        },
      },
    };

    const correlativeFile = 1;

    const excelFile = generateExcelFile(grouperJournals, sapMappingTables, correlativeFile);

    expect(excelFile.fileName).toBe('SA20220101.xlsx');
    expect(excelFile.errors.length).toBe(2);
    expect(excelFile.errors[0].message).toContain(EXCEL_TRANSFORMER_ERROR_MESSAGES.INVALID_FORMAT_DATE);
  });

  // Handles correctly when a company code is not found in the mappings
  it('should handle correctly when a company code is not found in the mappings', () => {
    const grouperJournals: GroupedJournals = {
      keyGrouper: {
        companyCode: 'XYZ',
        accountPeriod: '202201',
        currency: 'USD',
      },
      accountsInfo: [
        {
          debitAmount: 100,
          creditAmount: 0,
          accountName: 'Account1',
          accountDescription: 'Description1',
        },
        {
          debitAmount: 0,
          creditAmount: 200,
          accountName: 'Account2',
          accountDescription: 'Description2',
        },
      ],
      entryDate: '20220101',
    };

    const sapMappingTables: SAPMapper = {
      accountsMappings: {
        SLAccount1: {
          AccountType: 'Type1',
          SAPAccount: 'SAPAccount1',
          SLAccount: 'SLAccount1',
        },
        SLAccount2: {
          AccountType: 'Type2',
          SAPAccount: 'SAPAccount2',
          SLAccount: 'SLAccount2',
        },
      },
      movementsMappings: {
        Type1: {
          debit: 1,
          credit: 2,
          accountType: 'Type1',
        },
        Type2: {
          debit: 3,
          credit: 4,
          accountType: 'Type2',
        },
      },
      companyMappings: {
        ABC: {
          SAPCompanyCode: 'SAPCode',
          SLCompanyCode: 'ABC',
        },
      },
    };

    const correlativeFile = 1;

    expect(() => generateExcelFile(grouperJournals, sapMappingTables, correlativeFile)).toThrow(
      InvalidSKLCodeCompanyMappingException,
    );
  });
});

it('should handle correct CME CODES  ', () => {
  const grouperJournals: GroupedJournals = {
    keyGrouper: {
      companyCode: 'ABC',
      accountPeriod: '202201',
      currency: 'USD',
    },
    accountsInfo: [
      {
        debitAmount: 100,
        creditAmount: 120,
        accountName: 'SLAccount1',
        accountDescription: 'Description1',
      },
      {
        debitAmount: 0,
        creditAmount: 120,
        accountName: 'SLAccount2',
        accountDescription: 'Description2',
      },
      {
        debitAmount: 10,
        creditAmount: 0,
        accountName: 'SLAccount3',
        accountDescription: 'Description2',
      },
    ],
    entryDate: '20220101',
  };

  const sapMappingTables: SAPMapper = {
    accountsMappings: {
      SLAccount1: {
        AccountType: 'CLIENTE',
        SAPAccount: 'SAPAccount1',
        SLAccount: 'SLAccount1',
        CME: 'CME1',
      },

      SLAccount2: {
        AccountType: 'Type2',
        SAPAccount: 'SAPAccount2',
        SLAccount: 'SLAccount2',
        CME: 'CME1',
      },
      SLAccount3: {
        AccountType: 'CLIENTE',
        SAPAccount: 'SAPAccount3',
        SLAccount: 'SLAccount3',
      },
    },
    movementsMappings: {
      CLIENTE: {
        debit: 1,
        credit: 2,
        accountType: 'CLIENTE',
        creditCME: 3,
        debitCME: 4,
      },
      Type2: {
        debit: 5,
        credit: 6,
        accountType: 'Type2',
      },
    },
    companyMappings: {
      ABC: {
        SAPCompanyCode: 'SAPCode',
        SLCompanyCode: 'ABC',
      },
    },
  };

  const correlativeFile = 1;

  const excelFile = generateExcelFile(grouperJournals, sapMappingTables, correlativeFile);

  expect(excelFile.fileName).toBe('SA20220101.xlsx');
  expect(excelFile.rows.length).toBe(4);
  // cuenta con CME con tipo cliente toma debitoCME
  expect(excelFile.rows[0].claveContabilizacion).toBe('3');
  // cuenta con CME con tipo cliente toma creditoCME
  expect(excelFile.rows[1].claveContabilizacion).toBe('4');
  expect(excelFile.rows[2].claveContabilizacion).toBe('6');
  // cuenta sin CME con tipo cliente toma debito
  expect(excelFile.rows[3].claveContabilizacion).toBe('1');
});

it('should handle if CME CODES doesnt exist ', () => {
  const grouperJournals: GroupedJournals = {
    keyGrouper: {
      companyCode: 'ABC',
      accountPeriod: '202201',
      currency: 'USD',
    },
    accountsInfo: [
      {
        debitAmount: 100,
        creditAmount: 0,
        accountName: 'SLAccount1',
        accountDescription: 'Description1',
      },
      {
        debitAmount: 0,
        creditAmount: 120,
        accountName: 'SLAccount2',
        accountDescription: 'Description2',
      },
    ],
    entryDate: '20220101',
  };

  const sapMappingTables: SAPMapper = {
    accountsMappings: {
      SLAccount1: {
        AccountType: 'CLIENTE',
        SAPAccount: 'SAPAccount1',
        SLAccount: 'SLAccount1',
        CME: 'CME1',
      },

      SLAccount2: {
        AccountType: 'Type2',
        SAPAccount: 'SAPAccount2',
        SLAccount: 'SLAccount2',
        CME: 'CME1',
      },
    },
    movementsMappings: {
      CLIENTE: {
        debit: 1,
        credit: 2,
        accountType: 'CLIENTE',
      },
      Type2: {
        debit: 5,
        credit: 6,
        accountType: 'Type2',
      },
    },
    companyMappings: {
      ABC: {
        SAPCompanyCode: 'SAPCode',
        SLCompanyCode: 'ABC',
      },
    },
  };

  const correlativeFile = 1;

  const excelFile = generateExcelFile(grouperJournals, sapMappingTables, correlativeFile);

  expect(excelFile.fileName).toBe('SA20220101.xlsx');
  expect(excelFile.rows.length).toBe(1);
  // cuenta con CME con tipo cliente toma debitoCME
  expect(excelFile.errors[0].message).toContain(EXCEL_TRANSFORMER_ERROR_MESSAGES.INVALID_CME_CODE('CLIENTE'));
});
